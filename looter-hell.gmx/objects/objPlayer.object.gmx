<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRebel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hpmax = global.level*100;
capacity = global.level*300;
chargerate = global.level*10;
delay = 4;
shieldbreak = 0;

global.hp = hpmax;
global.shield = capacity;

basespeed = 3;
mspeed = basespeed;
dspeed = basespeed*2;

image_speed = 0;
image_index = 0;

texture = texCamo;

equipped = -1;
canmove = true;
moving = false;
canshoot = true;
reloading = false;
reloadtime = 0;
burstcount = 0;
sfx_reload = 0;

skill = "Dash";
cool = room_speed;

skillactive = false;
skillcool = false;

vampire = 0;

body = 0;

fire = false;
frozen = false;
corrode = false;

xsc = -0.7;
ysc = 0.7;
xof = -4;
yof = 4;

hi = 0;

//create mag trackers
for(i=0; i&lt;global.loadSlots; i+=1) {
    if (global.loadout[i] == -1) global.mag[i] = 0;
    else global.mag[i] = global.inventory[global.loadout[i],7];
}

l = -1;
for(j=0;j&lt;global.loadSlots;j++) {
    if (global.loadout[j] != -1 and l == -1) l = j;
}

scrSwitchWep(l);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//cooldown over
skillcool = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>skillactive = false;
skillcool = true;

switch(skill) {
    case("Dash"): mspeed = basespeed; break;
}

alarm[5] = cool;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>burstcount = 0;
canshoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vampire -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (reloading == true) {
    //reset ammo
    if (barrel == sprMeatshotBarrel)
    scrReloadGun(equipped,1);
    else {
    scrReloadGun(equipped,0);
    audio_play_sound(sfxReloadEnd,20,false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//keep shooting until burst finished
if (burst &gt; 0 and global.mag[equipped] &gt; 0) {

//add to burstcount
if (burst &gt; 0) burstcount += 1;

//if underneath burst limit
if (burstcount &lt; burst) {
    
    //shoot sound
    scrShootSound();
    //screen shake
    //scrShake(0.5,0.1);

    proj = instance_create(x+xsh,y+ysh,pattern);
    proj.type = objBullet;
    proj.speed = bspeed;
    proj.num = bnum;
    proj.spread = bspread/bnum;
    proj.owner = 0;

    scrSetProj(proj);

    //deathspawn limit
    proj.splits = splits;

    global.mag[equipped] -= 1;
    alarm[0] = (room_speed/rate);
    
}else{
    //if reached burst limit
    alarm[3] = 2*(room_speed/rate);
}


}else{
    //just set canshoot to true if not bursting
    canshoot = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//CHECK FOR LOADOUT UPDATE
if(global.updated_load != -1) {
    if (equipped == global.updated_load) scrSwitchWep(equipped);
    global.updated_load = -1;
}

//SWITCH WEAPONS
for(i=0;i&lt;global.loadSlots-1;i++) {
    if (keyboard_check(ord(string(i+1)))) {
    scrSwitchWep(i);
    if (sfx_reload != 0) audio_stop_sound(sfx_reload);
    }
}

//MOVEMENT
if (canmove == true and global.inv_open == false) {
image_speed = 0;
if (keyboard_check(vk_up)) {y-=mspeed; image_speed = 0.1;}
if (keyboard_check(vk_down)) {y+=mspeed; image_speed = 0.1;}
if (keyboard_check(vk_left)) {x-=mspeed; image_speed = 0.1;}
if (keyboard_check(vk_right)) {x+=mspeed; image_speed = 0.1;}
}

//WALK IF BACKGROUND SCROLLING
if (background_hspeed[0] != 0) image_speed = 0.1;

//for skills with effect every step:
if (skillactive == true) {
switch(skill) {
    case("Dash"):
    ii = instance_create(x,y,objDashTrail);
    ii.sprite_index = sprite_index;
    ii.image_index = image_index;
    ii.image_alpha = 0.5;
    break;
}
}

//increment reload timer
if (reloading == true) reloadtime += (1/room_speed);

//vampire drain effect
if (body = sprVampireBody) {
global.hp -= (damage/10)/room_speed;
vampire -= 0.05;
if (vampire &lt; 0) vampire = 0;
}


if (equipped != -1) {
    //stop mag size going over max
    if (global.mag[equipped] &gt; global.inventory[global.loadout[equipped],7])
    global.mag[equipped] = global.inventory[global.loadout[equipped],7];
    
    //reload if out of ammo
    if (global.mag[equipped] == 0 and reloading = false and (barrel != sprMeatshotBarrel)) {
        scrReloadSound();
        reloading = true;
        alarm[1] = room_speed * global.inventory[global.loadout[equipped],6];
    }

    type = global.inventory[global.loadout[equipped],1];
    //Set gun+hand position
    scrGunPos();

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//GET SHIELD STATS
if (global.loadout[global.loadSlots-1] != -1) {
    capacity = global.inventory[global.loadout[global.loadSlots-1],3];
    delay = global.inventory[global.loadout[global.loadSlots-1],4];
    chargerate = global.inventory[global.loadout[global.loadSlots-1],5];
}else{
    capacity = 0;
}

//SHIELD DELAY
if(shieldbreak &gt; 0) { shieldbreak--; }else{

//SHIELD RECHARGE
global.shield += (chargerate/room_speed);

}

//PREVENT OVERCHARGE
if(global.shield &gt; capacity) global.shield = capacity;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = xprevious;
y = yprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (canshoot == true and global.mag[equipped] &gt; 0) {

//cancel reload
if (reloading == true) {audio_stop_sound(sfx_reload); reloadtime = 0; reloading = false;}

//only shoot either if not burstfire or if underneath burst limit
if (burst == 0 or burstcount == 0) {

//freeze enemies
if (body = sprWorldBody) {
for (i=0; i&lt;instance_number(objEnemy); i++) {
   enemy = instance_find(objEnemy,i);
   enemy.canmove = false;
   enemy.canshoot = false;
}
}

//shoot sound
scrShootSound();
//screen shake
//scrShake(0.5,0.1);

proj = instance_create(x+xsh,y+ysh,pattern);
proj.owner = 0;
proj.type = objBullet;
proj.speed = bspeed;
proj.num = bnum;
proj.spread = bspread/bnum;

scrSetProj(proj);

//deathspawn limit
proj.splits = splits;

//add to burstcount
//if (burst &gt; 0) burstcount += 1;

global.mag[equipped] -= 1;
alarm[0] = (room_speed/rate);

canshoot = false;

}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (reloading == false 
and global.mag[equipped] != global.inventory[global.loadout[equipped],7]) {
    scrReloadSound();
    reloading = true;
    alarm[1] = room_speed * global.inventory[global.loadout[equipped],6];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If skill not active and skill not on cooldown
if (skillactive == false and skillcool == false) {

    switch(skill) {
    case("Dash"): audio_play_sound(sfxPlayerDash,20,false); mspeed = dspeed; break;
    }

    skillactive = true;
    alarm[4] = room_speed/4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(view_wport[0], view_hport[0]);

draw_set_font(global.font_gui);

//draw_text(10,10,"HP: " + string(global.hp));
//draw_text(10,20,"Shield: " + string(global.shield));

//HP/SHIELD CIRCLES
draw_pie(64,64,global.hp,hpmax,c_red,32,1);
draw_circular_bar(64,64,global.shield,capacity,c_aqua,48,1,16);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(global.font_stats);
draw_sprite(sprite_index,-1,x,y);

//draw reload
if (reloading == true) {
    //draw_text(x,y-64,global.inventory[global.loadout[equipped],6] - reloadtime);
    draw_circular_bar(x,y-48,reloadtime,global.inventory[global.loadout[equipped],6],c_dkgray,16,0.7,6);
}

//draw gun
if (equipped != -1) {
if (global.loadout[equipped] != -1) {

    //draw BOTTOM hand
    draw_sprite(sprPlayerHand1,hi,x,y);

    xcenter = sprite_get_width(body)/2;

    if (scope != 0) draw_sprite_texture(scope,texture,0,x+xof+xcenter,y+yof,xsc,ysc);
    if (stock != 0) draw_sprite_texture(stock,texture,0,x+xof+xcenter,y+yof,xsc,ysc);
    draw_sprite_texture(grip,texture,0,x+xof+xcenter,y+yof,xsc,ysc);
    
    if (type == "Shotgun") {
    draw_sprite_texture(body,texture,0,x+xof+xcenter,y+yof,xsc,ysc);
    draw_sprite_texture(barrel,texture,0,x+xof+xcenter,y+yof,xsc,ysc);
    }else{    
    draw_sprite_texture(barrel,texture,0,x+xof+xcenter,y+yof,xsc,ysc);
    draw_sprite_texture(body,texture,0,x+xof+xcenter,y+yof,xsc,ysc);
    }
    
    //draw TOP hand
    draw_sprite(sprPlayerHand2,hi,x,y);
    
    //draw ammo
    draw_text(view_xview[0],view_yview[0]+view_hview[0]/2,"Ammo: " + string(global.mag[equipped]) + " / " + string(global.inventory[global.loadout[equipped],7]))
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rmHub);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>equipped++;
if (equipped&gt;=global.loadSlots) equipped = 0;

scrSwitchWep(equipped);
if (sfx_reload != 0) audio_stop_sound(sfx_reload);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>burstcount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
