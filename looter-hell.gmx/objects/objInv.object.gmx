<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.inv_open = false;

prefix = "";
drawcard = false;
moused = false;
sel = 0;
across = 0;
switching = -1;
iswitch = 0;
idelay = 0;
body = 0;

uinum = 0;
loadwidth = 0;
invwidth = 0;
xsc = 2;
ysc = 2;
ipage = 0;
inum = 12;

vampire = 0;

//set filters
filterNum = 0;

//filters[0] = "Pistol";
//filters[1] = "Assault Rifle";
//filterNum = 1;


//APPLY SORTING TO INVENTORY (V IMPORTANT)

//create sorted inv
for(i=0;i&lt;global.invSize;i++) {
    sinv[i] = i;
}

sinv = inv_sort(sinv);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>idelay = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.inv_open == false exit;

//xp = view_xview[0]+320;
//yp = view_yview[0]+32;

xp = 640;
yp = 32;

//SORT INVENTORY
if (keyboard_check(ord('S'))) sinv = inv_sort(sinv);

//CHANGE INV PAGE
if (idelay = 0) {
    if (keyboard_check(ord('A'))) {ipage--; idelay = 1; alarm[0] = room_speed/10;}
    if (keyboard_check(ord('D'))) {ipage++; idelay = 1; alarm[0] = room_speed/10;}
    if(ipage&lt;0) ipage = 0;
    if(ipage&gt;scrSInvSize()/inum) ipage = floor(scrSInvSize()/inum);
}

//delete
if (keyboard_check_pressed(ord('B')) or (moused == true and mouse_check_button_pressed(mb_right))) {
    if (across == 1) {
        //delete from loadout
        for(i=0;i&lt;global.loadSlots;i++) {if (global.loadout[i] == sinv[sel]) {global.loadout[i] = -1}}
        
        //drop weapon
        scrDropInv(sinv[sel]);
        
        //shift inventory up by one
        if (sel &lt; global.invSize-1) {
        for (k=sel+1; k&lt;global.invSize; k++) {
            scrMoveInv(k);
        }}
    }
}

//SELECT ITEM
if (keyboard_check_pressed(vk_enter)
or (moused == true and mouse_check_button_pressed(mb_left))) {

    //if not already switching
    if (switching == -1) {
        //from loadout
        if (across == 0) {
        if (global.loadout[sinv[sel]] != -1) switching = 0; across = 1;
        //from inventory
        }else if (across == 1) {
        switching = 1; across = 0;
        }
        
        iswitch = sel;
        
        //RECORD CURRENT WEP STATS
        
        //move sel up if necessary
        if (sel &gt; global.loadSlots)
        sel = global.loadSlots-1;
    
    //otherwise switch
    }else{
        //if switching from loadout
        if (switching == 0) {
            if (across == 0) { //to loadout
            
                //CHECK LOADOUT SLOT IS VALID
                if ((scrItemType(global.inventory[iswitch,1]) == 0 and sel &lt; global.loadSlots-1)) {
                
                    temp = global.loadout[sel]; global.loadout[sel] = global.loadout[iswitch]; global.loadout[iswitch] = temp;
                    scrReloadGun(iswitch,0); scrReloadGun(sel,0);
                    global.updated_load = sel;
                }
            }
            //to inv
            if (across == 1) {
                //If gun not already in loadout, switch
                if (scrInLoadout(sinv[sel]) == false) {
                
                    //CHECK LOADOUT SLOT SELECTED WAS VALID
                    if ((scrItemType(global.inventory[sinv[sel],1]) == 0 and iswitch &lt; global.loadSlots-1) or
                    (scrItemType(global.inventory[sinv[sel],1]) == 1 and iswitch = global.loadSlots-1)) {
                
                    global.loadout[iswitch] = sinv[sel]; scrReloadGun(iswitch,0);
                    global.updated_load = iswitch;
                    
                    }
                }
            }
        }
        //if switching from inventory
        if (switching == 1) {
            if (across == 0) { //to loadout
                //If gun not already in loadout, switch
                if (scrInLoadout(sinv[iswitch]) == false) {
                
                    //CHECK LOADOUT SLOT SELECTED IS VALID
                    if ((scrItemType(global.inventory[sinv[iswitch],1]) == 0 and sel &lt; global.loadSlots-1) or
                    (scrItemType(global.inventory[sinv[iswitch],1]) == 1 and sel = global.loadSlots-1)) {
                
                    global.loadout[sel] = sinv[iswitch]; scrReloadGun(sel,0);
                    global.updated_load = sel;
                    
                    }
                }
            }
            //to inv
            if (across == 1) {}
        }
        switching = -1;
    }
}

//UP/DOWN KEYS
if (keyboard_check(vk_down) and idelay == 0) {
    if (across == 1) and (sel+1 &lt; scrSInvSize()) {
        sel+=1;
    }else if (across == 0) {
        sel += 1;
    }
    idelay = 1;
    alarm[0] = room_speed/10;
}

if (keyboard_check(vk_up) and idelay == 0) {
    sel-=1;
    idelay = 1;
    alarm[0] = room_speed/10;
}

if (keyboard_check_pressed(vk_left)) {across=0};
if (keyboard_check_pressed(vk_right)) {across=1};

//select gun by mouseover

//get start and end indexes of current page
var p = 0;
pstart = 0; //first page start
while(p &lt; ipage) {
    pstart = scrSPageSize(pstart,inum); //add prev page size to the next
    p++;
}
//then simply get the next page size at the end
pend = scrSPageSize(pstart,inum);

//pstart = scrSPageSize(0,ipage*inum);
//pend = scrSPageSize(pstart,inum);

moused = false; j = 0;
for(i=pstart;i&lt;pend;i++) {
    if (scrCheckFilters(global.inventory[sinv[i],1])) {
        if(point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),xp+loadwidth,yp+(j*16),xp+loadwidth+string_width(global.inventory[sinv[i],0]),yp+(j*16+16))) {
            sel = i;
            across = 1;
            moused = true;
        }
        j++;
    }
}

//select loadout by mouseover
for(i=0;i&lt;global.loadSlots;i++) {
    if(point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),xp,yp+(i*16),xp+loadwidth,yp+(i*16+16))) {
    sel = i;
    across = 0;
    moused = true;
    }
}

if (sel &lt; 0) sel = 0;

//INV
if (across == 1) {
    if (sel &gt; global.invSize-1) sel = global.invSize-1;
//LOADOUT
}else if (across == 0) {
    if (sel &gt; global.loadSlots-1) sel = global.loadSlots-1;
}

//UPDATE GUN SHOWN
if (scrInvSize() &gt; 0) {
    drawcard = true;
    if (across == 0) {
        if (global.loadout[sel] != -1) { i = global.loadout[sel];
        }else{ drawcard = false; }
    }else if (across == 1) {
        if (global.inventory[sinv[sel],0] != "") { i = sinv[sel];
        }else{ drawcard = false; }
    }else{
        drawcard = false; //just in case
    }
    
    //get card stats if it exists
    if (drawcard == true) {
        scrWepStats(i);
        elem_index = scrGetElemIndex(element);
        if (body == sprVampireBody) vampire = 4;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//CODE FOR DRAWING WEAPON CARD
if drawcard == false exit;

//get the max width of the guncard
draw_set_font(global.font_gui);
gwidth = sprite_get_width(body)*xsc;
gheight = sprite_get_height(body)*ysc;
scrGetGCWidth();

xw = xp-(width+16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objInv</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(view_wport[0], view_hport[0]);

draw_set_font(global.font_gui);

if global.inv_open == false exit;

//BACKGROUND
c = merge_color(c_white,c_dkgray,0.5);
draw_rectangle_colour(xp-8,yp-8,xp+32+loadwidth+invwidth,yp+32+(inum*16),c_white,c_white,c,c,0);
draw_set_color(c_black);

//LOADOUT
uiwidth = 0;
for(i=0;i&lt;global.loadSlots;i++) {
    //HIGHLIGHT SELECTION
    draw_set_color(c_black);
    
    //IF NOT SWITCHING
    if (switching == -1) {
        //IF CURRENT SELECTED
        if (across == 0 and i == sel) draw_set_color(c_green);
    }else{
        //IF SWITCHING AND CURRENT IS SELECTED
        //OR SWITCHING FROM INV AND CURRENT WAS SELECTED
        if ((across == 0 and i == sel) or (switching == 0 and i == iswitch)) draw_set_color(c_blue);
    }
    
    if (global.loadout[i] != -1) {
        draw_text_w(xp,yp+(i*16),global.inventory[global.loadout[i],0]);
        //if (string_width(global.inventory[loadout[sel],0]) &gt; loadwidth) loadwidth = global.inventory[loadout[sel],0];
    }else{
        draw_text(xp,yp+(i*16),load_text("empty"));
    }
}

loadwidth = uiwidth+8;
uiwidth = 0;

//INV
j = 0;
for(i=pstart;i&lt;pend;i++) {
    //HIGHLIGHT SELECTION
    draw_set_color(c_black);
    
    //IF NOT SWITCHING
    if (switching == -1) {
        //IF CURRENT SELECTED
        if (across == 1 and i == sel) draw_set_color(c_green);
    }else{
        //IF SWITCHING AND CURRENT IS SELECTED
        //OR SWITCHING FROM INV AND CURRENT WAS SELECTED
        if ((across == 1 and i == sel) or (switching == 1 and i == iswitch)) draw_set_color(c_blue);
    }
    
    //Filter out Types in filters[]
    if (scrCheckFilters(global.inventory[sinv[i],1]))
    {draw_text_w(xp+loadwidth+8,yp+(j*16),global.inventory[sinv[i],0]); j++;}
}

invwidth = uiwidth;

draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//CODE FOR DRAWING WEAPON CARD
if drawcard == false exit;

//draw background card
c1 = scrSetRarityColour();
c2 = merge_colour(c1,c_dkgray,0.5);
draw_rectangle_color(xw-8,yp-8,xw+width,yp+gheight,c1,c1,c2,c2,0);
draw_set_color(c_black);

if (type == "Shield") {
    draw_sprite_texture(arm,texture,0,xw,yp+(gheight*0.1),xsc,ysc);
    draw_sprite_texture(battery,texture,0,xw,yp+(gheight*0.1),xsc,ysc);
    draw_sprite_texture(body,texture,0,xw,yp+(gheight*0.1),xsc,ysc);
}else{
    //draw sprite
    if (scope != 0) draw_sprite_texture(scope,texture,0,xw,yp+(gheight*0.1),xsc,ysc);
    if (stock != 0) draw_sprite_texture(stock,texture,0,xw,yp+(gheight*0.1),xsc,ysc);
    
    draw_sprite_texture(grip,texture,0,xw,yp+(gheight*0.1),xsc,ysc);
    //DECIDE ORDER TO DRAW BODY/BARREL
    if (type == "Shotgun") {
        draw_sprite_texture(body,texture,0,xw,yp+(gheight*0.1),xsc,ysc);
        draw_sprite_texture(barrel,texture,0,xw,yp+(gheight*0.1),xsc,ysc);
    }else{
        draw_sprite_texture(barrel,texture,0,xw,yp+(gheight*0.1),xsc,ysc);
        draw_sprite_texture(body,texture,0,xw,yp+(gheight*0.1),xsc,ysc);
    }
    
    //DPS
    draw_text(xw+4,yp,"DPS: " + string(damage*rate + elem_dps));
    
    //Element
    if (elem_index != 0) {
        draw_text(xw+4,yp+(gheight*0.6),string(element));
        draw_text_w(xw+4,yp+(gheight*0.6)+10,load_text("elementchance") + ": " + string(elem_chance));
    }

}

var wcomp;

//draw stats
draw_text(xw+width1,yp,string(name));
draw_text(xw+width1,yp+16,load_text("level") + " " + string(level) + " " + string(type));

if (type == "Shield") {
    wcomp = draw_text_w(xw+width1,yp+32,load_text("capacity") + ": " + string(capacity));
    scrCompare(xw+width1+wcomp,yp+32,3);
    
    wcomp = draw_text_w(xw+width1,yp+48,load_text("shieldrate") + ": " + string(chargerate));
    scrCompare(xw+width1+wcomp,yp+48,5);
    
    wcomp = draw_text_w(xw+width1,yp+64,load_text("shielddelay") + ": " + string(delay));
    scrCompare(xw+width1+wcomp,yp+64,4);
}else{
    
    if (bnum &gt; 1) wcomp = draw_text_w(xw+width1,yp+32,load_text("damage") + ": " + string(damage) + "x" + string(bnum));
    else wcomp = draw_text_w(xw+width1,yp+32,load_text("damage") + ": " + string(damage));
    scrCompare(xw+width1+wcomp,yp+32,3);
    
    wcomp = draw_text_w(xw+width1,yp+48,load_text("accuracy") + ": " + string(acc));
    scrCompare(xw+width1+wcomp,yp+48,4);
    
    wcomp = draw_text_w(xw+width1,yp+64,load_text("firerate") + ": " + string(rate));
    scrCompare(xw+width1+wcomp,yp+64,5);
    
    wcomp = draw_text_w(xw+width1,yp+80,load_text("reloadspeed") + ": " + string(reload));
    scrCompare(xw+width1+wcomp,yp+80,6);
    
    wcomp = draw_text_w(xw+width1,yp+96,load_text("magsize") + ": " + string(mag));
    scrCompare(xw+width1+wcomp,yp+97,7);
    
}

//RED TEXT
if (redtext != "") {draw_set_color(c_red); draw_text(xw+width1,yp+112,redtext); draw_set_color(c_black);}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.inv_open == false
    global.inv_open = true; else global.inv_open = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
